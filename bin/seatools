#!/usr/bin/env node

var commander = require('commander');
var grunt = require('../lib/grunt');

commander
  .version(require('../package.json').version)
  .option('-v, --verbose', 'Show more infomation.');

commander
  .command('build')
  .description('Build seajs')
  .action(function(){
    grunt.invoke('build');
  });

commander
  .command('size')
  .description('Get seajs file size')
  .action(function(){
    grunt.invoke('size');
  });

commander
  .command('publish')
  .description('Publish to gh-pages')
  .action(function(){
    grunt.invoke('publish');
  });

commander
  .command('site')
  .description('Generate site and debug')
  .option('-w, --watch', 'Start a watch server')
  .action(function(){
    var sub = this.args[0];
    if (sub.watch) {
      grunt.invoke('site-watch');
    } else {
      grunt.invoke('site');
    }
  });

commander
  .command('test')
  .description('Test seajs')
  .option('--local', 'Test seajs using phantom')
  .option('--http', 'Test seajs using phantom with server')
  .option('--totoro', 'Test seajs using totoro')
  .action(function(){
    var sub = this.args[0];
    if (sub.totoro) {
      grunt.invoke('test-totoro');
    } else if(sub.local) {
      grunt.invoke('test-local');
    } else if(sub.http) {
      grunt.invoke('test-http');
    } else {
      grunt.invoke('test');
    }
  });

commander.parse(process.argv);

var isExist = !commander.commands.every(function(item) {
  return item !== commander.args[0];
});

if (!isExist) {
  process.stdout.write(commander.helpInformation());
  commander.emit('--help');
  process.exit();
}
